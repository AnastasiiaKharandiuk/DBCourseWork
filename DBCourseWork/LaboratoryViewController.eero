//
//  LaboratoryViewController.eero
//  DBCourseWork
//
//  Created by Виктор Шаманов on 12/17/13.
//  Copyright (c) 2013 Victor Shamanov. All rights reserved.
//
 
#import "LaboratoryViewController.h"
#import "LaboratoryInputView.h"
#import "InputPanel.h"
#import "Laboratory.h"
#import "Departament.h"

interface LaboratoryViewController () <InputPanelDelegate>

Array laboratories {nonatomic}

end

implementation LaboratoryViewController

#pragma mark - Private methods

newLabel, return TextField
    textField := TextField.new
    textField.setEditable: NO
    textField.setBordered: NO
    textField.setDrawsBackground: NO
    return textField

newButton, return Button
    button := Button.new
    button.setBezelStyle: ShadowlessSquareBezelStyle
    return button

updateItems
    fetchRequest := FetchRequest.alloc.initWithEntityName: StringFromClass(Laboratory.class)
    self.laboratories = self.context.executeFetchRequest: fetchRequest, error: nil
    self.tableView.reloadData

showEditLaboratoryDialogWithMode:InputMode
    laboratoryInputView := LaboratoryInputView.new
    
    departamentFetchRequest := FetchRequest.alloc.initWithEntityName: StringFromClass(Departament.class)
    
    laboratoryInputView.departaments = self.context.executeFetchRequest: departamentFetchRequest, error: nil
    
    switch mode
        case InputModeNew
            inputPanel := InputPanel.alloc.initWithInputView: laboratoryInputView, inputMode: mode, delegate: self
            
            self.parentWindow.beginSheet: inputPanel, completionHandler: (ModalResponse returnCode)
                self.sendUpdateTablesNotification
        case InputModeEdit
            
            selectedRow := self.tableView.selectedRow
            
            if selectedRow >= 0
                
                Laboratory laboratory = self.laboratories[selectedRow]
                
                inputPanel := InputPanel.alloc.initWithInputView: laboratoryInputView, inputMode: mode, delegate: self

                laboratoryInputView.responsableTextField.stringValue = laboratory.responsablePerson

                laboratoryInputView.departamentComboBox.reloadData

                departaments := laboratoryInputView.departaments

                Integer index = departaments.indexOfObjectPassingTest: BOOL (id obj,  UInteger idx, BOOL* stop)
                    return obj == laboratory.departament

                if index != (Integer)NSNotFound
                    laboratoryInputView.departamentComboBox.selectItemAtIndex: index
    
                self.parentWindow.beginSheet: inputPanel, completionHandler: (ModalResponse returnCode)
                    self.sendUpdateTablesNotification
            
            else
                alert := Alert.alertWithMessageText: 'Nothing to edit',
                    defaultButton: 'Ok',
                        alternateButton: nil,
                            otherButton: nil,
                                informativeTextWithFormat: 'Please select a Laboratory'
                alert.runModal

#pragma mark - Public methods

updateTablesNotificationReceived
    self.updateItems

#pragma mark - Actions

roomsButtonPressed: Button sender
    Log('showing all rooms')

addButtonPressed: Button sender
    self.showEditLaboratoryDialogWithMode: InputModeNew

editButtonPressed: Button sender
    self.showEditLaboratoryDialogWithMode: InputModeEdit

deleteButtonPressed: Button sender
    selectedRow := self.tableView.selectedRow
    
    if selectedRow >= 0
        self.context.deleteObject: self.laboratories[selectedRow]
        self.context.save: nil
        self.sendUpdateTablesNotification
    else
        alert := Alert.alertWithMessageText: 'Nothing to delete',
            defaultButton: 'Ok',
                alternateButton: nil,
                    otherButton: nil,
                        informativeTextWithFormat: 'Please select a Laboratory'
        alert.runModal


#pragma mark - Input panel delegate

doneButtonPressedInInputPanel: InputPanel, inputMode: InputMode
    
    LaboratoryInputView laboratoryInputView = (LaboratoryInputView)panel.inputView
    
    indexOfSelectedDepartament := laboratoryInputView.departamentComboBox.indexOfSelectedItem
    departaments := laboratoryInputView.departaments
    Departament departament = indexOfSelectedDepartament < departaments.count ? departaments[indexOfSelectedDepartament] : nil
    
    Laboratory laboratory = nil
    switch mode
        case InputModeNew
            laboratory = EntityDescription.insertNewObjectForEntityForName: StringFromClass(Laboratory.class), inManagedObjectContext: self.context
        case InputModeEdit
            laboratory = self.laboratories[self.tableView.selectedRow]
    
    if departament
        departament.addLaboratoriesObject: laboratory
    else
        departament.removeLaboratoriesObject: laboratory


    laboratory.responsablePerson = laboratoryInputView.responsableTextField.stringValue

    self.context.save: nil
    
    self.parentWindow.endSheet: panel

cancelButtonPressedInInputPanel: InputPanel
    self.parentWindow.endSheet: panel

#pragma mark - View controller lifecycle

viewDidLoad
    
    heights := {'Responsable':@200.0, 'Rooms':@150.0}
    
    for String columnIdentifier in ['Responsable', 'Rooms']
        column := TableColumn.alloc.initWithIdentifier: columnIdentifier
        column.headerCell.setTitle: columnIdentifier
        column.setWidth: heights[columnIdentifier].integerValue
        column.setResizingMask: NSTableColumnUserResizingMask
        self.tableView.addTableColumn: column
    
    self.updateItems

loadView
    super.loadView
    self.viewDidLoad

#pragma mark - TableView delegate & datasource

numberOfRowsInTableView: TableView, return Integer = self.laboratories.count

tableView: TableView tableView, viewForTableColumn: TableColumn, row: Integer, return View = nil
    
    Laboratory laboratory = self.laboratories[row]
    
    if column.identifier == 'Responsable'
        TextField textField = tableView.makeViewWithIdentifier: column.identifier, owner: self
        
        if not textField
            textField = self.newLabel
            textField.identifier = column.identifier
        
        textField.stringValue = laboratory.responsablePerson
        return textField
    
    else if column.identifier == 'Rooms'
        Button button = tableView.makeViewWithIdentifier: column.identifier, owner: self
        
        if not button
            button = self.newButton
            button.identifier = column.identifier
            button.tag = row
            button.target = self
            button.action = |roomsButtonPressed:|
        
        button.title = String.stringWithFormat:'All rooms(%ld)', laboratory.rooms.count
        return button

end

